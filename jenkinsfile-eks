pipeline {
    agent any

    environment {
        // AWS Credentials and Region Setup
        AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
        AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        AWS_REGION = 'eu-north-1'

        // ECR Repository Name and Kubernetes Config
        ECR_REPO_NAME = credentials('ECR_REPO_NAME')
        KUBECONFIG = credentials('KUBECONFIG')

        // Git repository URL and branch
        GIT_REPO_URL = 'https://github.com/Chem2527/jen-Terra-ansi-ecr-eks-prom-graf.git'
        GIT_BRANCH = 'main'

        // Kubernetes Manifests Paths
        DEPLOYMENT_YAML = 'k8s/deployment.yml'
        SERVICE_YAML = 'k8s/service.yaml'
        HPA_YAML = 'k8s/hpa.yaml'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    git url: "${GIT_REPO_URL}", branch: "${GIT_BRANCH}", credentialsId: 'Git'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t flask-demo-app .'
                }
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([string(credentialsId: 'AWS_ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                                 string(credentialsId: 'ECR_REPO_NAME', variable: 'ECR_REPO_NAME'),
                                 string(credentialsId: 'AWS_REGION', variable: 'AWS_REGION')]) {
                    script {
                        sh """
                            aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                            docker tag flask-demo-app:latest "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:latest"
                            docker push "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:latest"
                        """
                    }
                }
            }
        }

        stage('Configure Kubernetes on EKS') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        sh '''
                            mkdir -p $WORKSPACE/.kube
                            cp "$KUBECONFIG_FILE" "$WORKSPACE/.kube/config"
                            export KUBECONFIG="$WORKSPACE/.kube/config"
                            aws eks update-kubeconfig --region eu-north-1 --name example --kubeconfig "$WORKSPACE/.kube/config"
                        '''
                    }
                }
            }
        }

        stage('Install Metrics Server') {
            steps {
                script {
                    sh """
                        export KUBECONFIG=${WORKSPACE}/.kube/config
                        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
                    """
                }
            }
        }

        stage('Deploy to Kubernetes (EKS)') {
            steps {
                script {
                    sh """
                        export KUBECONFIG=${WORKSPACE}/.kube/config
                        kubectl apply -f ${DEPLOYMENT_YAML}
                        kubectl apply -f ${SERVICE_YAML}
                    """
                }
            }
        }

        stage('Apply Horizontal Pod Autoscaler (HPA)') {
            steps {
                script {
                    sh """
                        export KUBECONFIG=${WORKSPACE}/.kube/config
                        kubectl apply -f ${HPA_YAML}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ CI/CD Pipeline completed successfully! App deployed to EKS with HPA."
        }
        failure {
            echo "❌ Pipeline failed. Check the logs for more details."
        }
    }
}
