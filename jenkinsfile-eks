pipeline {
    agent any

    environment {
        // AWS Credentials and Region Setup
        AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
        AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        AWS_REGION = 'eu-north-1'  // Replace with your AWS region (could be a variable too)
        
        // ECR Repository Name and Kubernetes Config
        ECR_REPO_NAME = credentials('ECR_REPO_NAME')  // Assuming you have the ECR repo name in Jenkins credentials
        KUBECONFIG = credentials('KUBECONFIG')  // Assuming you have the kubeconfig saved in Jenkins credentials
        
        // Git repository URL and branch
        GIT_REPO_URL = 'https://github.com/Chem2527/jen-Terra-ansi-ecr-eks-prom-graf.git'
        GIT_BRANCH = 'main'
        
        // Kubernetes Manifests Paths (placeholders)
        DEPLOYMENT_YAML = 'k8s/deployment.yml'
        SERVICE_YAML = 'k8s/service.yaml'
        HPA_YAML = 'k8s/hpa.yaml'  // Add path to your HPA YAML file
        METRICS_SERVER_RBAC_YAML = 'k8s/metrics-server-rbac.yaml'  // Path to your metrics-server-rbac.yaml file
        PROMETHEUS_YAML = 'k8s/prometheus.yaml'  // Path to Prometheus manifest
        GRAFANA_YAML = 'k8s/grafana.yaml'  // Path to Grafana manifest
        PROMETHEUS_ALERTS_YAML = 'k8s/prometheus-alerts.yaml'  // Path to Prometheus alerting rules
        GRAFANA_DASHBOARDS_YAML = 'k8s/grafana-dashboards.yaml'  // Path to Grafana dashboards
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    // Checkout the latest code from GitHub
                    git url: "${GIT_REPO_URL}", branch: "${GIT_BRANCH}", credentialsId: 'Git'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image using the Dockerfile in the repository
                    sh 'docker build -t flask-demo-app .'
                }
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([string(credentialsId: 'AWS_ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                                 string(credentialsId: 'ECR_REPO_NAME', variable: 'ECR_REPO_NAME'),
                                 string(credentialsId: 'AWS_REGION', variable: 'AWS_REGION')]) {
                    script {
                        echo "Logging into ECR..."
                        // Login to AWS ECR using AWS CLI
                        sh """
                            aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}".dkr.ecr."${AWS_REGION}".amazonaws.com
                        """
                        
                        echo "Tagging Docker image..."
                        // Tag the Docker image for ECR
                        sh """
                            docker tag flask-demo-app:latest "${AWS_ACCOUNT_ID}".dkr.ecr."${AWS_REGION}".amazonaws.com/"${ECR_REPO_NAME}":latest
                        """

                        echo "Pushing Docker image to ECR..."
                        // Push the Docker image to AWS ECR
                        sh """
                            docker push "${AWS_ACCOUNT_ID}".dkr.ecr."${AWS_REGION}".amazonaws.com/"${ECR_REPO_NAME}":latest
                        """
                    }
                }
            }
        }

        stage('Configure Kubernetes on EKS') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Configuring kubectl for EKS..."
                        // Set up kubectl to interact with EKS
                        // Save the KUBECONFIG to a writable location in the Jenkins workspace
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            cp ${KUBECONFIG_FILE} ${WORKSPACE}/kubeconfig
                            aws eks update-kubeconfig --region ${AWS_REGION} --name example --kubeconfig ${WORKSPACE}/kubeconfig
                        """
                    }
                }
            }
        }

        stage('Create Monitoring Namespace') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Creating monitoring namespace..."
                        // Create the monitoring namespace if it doesn't exist
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            kubectl create namespace monitoring || echo "Namespace 'monitoring' already exists"
                        """
                    }
                }
            }
        }

        stage('Install Metrics Server (if not installed)') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Checking if Metrics Server is installed..."
                        // Check if the metrics-server deployment exists, and if not, install it
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            kubectl get deployment metrics-server -n kube-system || kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
                        """
                    }
                }
            }
        }

        stage('Apply Metrics Server RBAC') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Applying Metrics Server RBAC..."
                        // Apply the metrics-server RBAC permissions
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            kubectl apply -f ${METRICS_SERVER_RBAC_YAML}
                        """
                    }
                }
            }
        }

        stage('Deploy Prometheus') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Deploying Prometheus..."
                        // Apply Prometheus manifest to deploy it in the monitoring namespace
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            kubectl apply -f ${PROMETHEUS_YAML} -n monitoring
                        """
                    }
                }
            }
        }

        stage('Deploy Grafana') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Deploying Grafana..."
                        // Apply Grafana manifest to deploy it in the monitoring namespace
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            kubectl apply -f ${GRAFANA_YAML} -n monitoring
                        """
                    }
                }
            }
        }

        stage('Apply Prometheus Alerts') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Applying Prometheus alerting rules..."
                        // Apply Prometheus alerting rules
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            kubectl apply -f ${PROMETHEUS_ALERTS_YAML} -n monitoring
                        """
                    }
                }
            }
        }

        stage('Apply Grafana Dashboards') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Applying Grafana dashboards..."
                        // Apply Grafana dashboard config
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            kubectl apply -f ${GRAFANA_DASHBOARDS_YAML} -n monitoring
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes (EKS)') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Applying Kubernetes manifests..."
                        // Apply Kubernetes Deployment and Service YAML files to EKS
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            kubectl apply -f ${DEPLOYMENT_YAML}
                            kubectl apply -f ${SERVICE_YAML}
                        """
                    }
                }
            }
        }

        stage('Configure Horizontal Pod Autoscaler (HPA)') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Applying Horizontal Pod Autoscaler (HPA)..."
                        // Apply HPA YAML to scale pods based on CPU utilization
                        sh """
                            export KUBECONFIG=${WORKSPACE}/kubeconfig
                            kubectl apply -f ${HPA_YAML}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "CI/CD Pipeline successfully completed! The application is deployed on EKS, Prometheus and Grafana are set up for monitoring, and auto-scaling is configured."
        }
        failure {
            echo "An error occurred during the CI/CD pipeline execution."
        }
    }
}
