pipeline {
    agent any

    environment {
        // AWS Credentials and Region Setup
        AWS_REGION = 'eu-north-1'

        // ECR Repository Name and Kubernetes Config
        KUBECONFIG_PATH = "${WORKSPACE}/.kube/config"

        // Git repository URL and branch
        GIT_REPO_URL = 'https://github.com/Chem2527/jen-Terra-ansi-ecr-eks-prom-graf.git'
        GIT_BRANCH = 'main'

        // Kubernetes Manifests Paths
        DEPLOYMENT_YAML = 'k8s/deployment.yml'
        SERVICE_YAML = 'k8s/service.yaml'
        HPA_YAML = 'k8s/hpa.yaml'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: env.GIT_BRANCH]],
                    extensions: [],
                    userRemoteConfigs: [[
                        url: env.GIT_REPO_URL,
                        credentialsId: 'Git'
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t flask-demo-app .'
                }
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                    string(credentialsId: 'ECR_REPO_NAME', variable: 'ECR_REPO_NAME'),
                    usernamePassword(
                        credentialsId: 'aws_credentials',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    )
                ]) {
                    script {
                        sh '''#!/bin/bash
                            aws ecr get-login-password --region "${AWS_REGION}" | \
                            docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                            docker tag flask-demo-app:latest "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:latest"
                            docker push "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:latest"
                        '''
                    }
                }
            }
        }

        stage('Configure Kubernetes on EKS') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "⚙️ Configuring kubectl for EKS..."
                        def kubeDir = "${env.WORKSPACE}/.kube"
                        
                        sh """#!/bin/bash
                            mkdir -p "${kubeDir}"
                            cp "${KUBECONFIG_FILE}" "${kubeDir}/config"
                            chmod 600 "${kubeDir}/config"
                            aws eks update-kubeconfig \
                                --region ${AWS_REGION} \
                                --name example \
                                --kubeconfig "${kubeDir}/config"
                        """
                    }
                }
            }
        }

        stage('Install Metrics Server') {
            steps {
                script {
                    echo " Installing Metrics Server..."
                    sh """
                        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml \
                          --kubeconfig="${KUBECONFIG_PATH}"
                    """
                }
            }
        }

        stage('Deploy to Kubernetes (EKS)') {
            steps {
                script {
                    echo " Deploying application to EKS..."
                    sh """
                        kubectl apply -f ${DEPLOYMENT_YAML} --kubeconfig="${KUBECONFIG_PATH}"
                        kubectl apply -f ${SERVICE_YAML} --kubeconfig="${KUBECONFIG_PATH}"
                    """
                }
            }
        }

        stage('Apply HPA') {
            steps {
                script {
                    echo " Applying Horizontal Pod Autoscaler..."
                    sh """
                        kubectl apply -f ${HPA_YAML} --kubeconfig="${KUBECONFIG_PATH}"
                    """
                }
            }
        }
    }

    post {
        success {
            echo " CI/CD Pipeline completed successfully! App deployed to EKS with HPA."
        }
        failure {
            echo " Pipeline failed. Check the logs for more details."
        }
    }
}
